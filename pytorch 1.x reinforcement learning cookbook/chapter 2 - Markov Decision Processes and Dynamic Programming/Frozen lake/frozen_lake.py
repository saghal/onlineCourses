# -*- coding: utf-8 -*-
"""Frozen lake

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S5zx54KKLWFzdJsJ7Il2wJa_BP4Dyyo4

## import libraries
"""

import torch
import gym

env = gym.make("FrozenLake-v0")
n_state = env.observation_space.n
n_action = env.action_space.n
env.reset()
env.render()

def run_episode(env, policy):
  state = env.reset()
  total_reward = 0
  is_done = False
  while not is_done:
    action = policy[state].item()
    state, reward, is_done, info = env.step(action)
    total_reward += reward
    if is_done:
      break
  return total_reward

n_episode = 1000
total_rewards = []
for episode in range(n_episode):
  random_policy = torch.randint(high=n_action, size=(n_state,))#generate random policy
  total_reward = run_episode(env, random_policy)
  total_rewards.append(total_reward)
print('Average total reward under random policy: {}'.format(sum(total_rewards) / n_episode))

"""record first pollicy reaches the goals"""

while True:
  random_policy = torch.randint(high=n_action, size=(n_state,))
  total_reward = run_episode(env, random_policy)
  if total_reward == 1:
    best_policy = random_policy
    break

"""test with recorded policy"""

total_rewards = []
for episode in range(n_episode):
  total_reward = run_episode(env, best_policy)
  total_rewards.append(total_reward)
print('Average total reward under random search policy: {}'.format(sum(total_rewards) / n_episode))