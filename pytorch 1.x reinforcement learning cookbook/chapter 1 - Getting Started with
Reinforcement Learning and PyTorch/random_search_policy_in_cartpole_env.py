# -*- coding: utf-8 -*-
"""random search policy in cartpole env

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_fTC6GKipjZIADjXe61NnAYiCThaSgBO

## import libraries
"""

import torch
import gym

"""##### Define cartpole environment"""

env = gym.make('CartPole-v0')

"""##### obtain dimensions of the observation and action space"""

n_state = env.observation_space.shape[0]
n_action = env.action_space.n

"""##### run each episode with specific weight"""

def run_episode(env, weight):
  state = env.reset()
  total_reward = 0
  is_done = False
  while not is_done:
    state = torch.from_numpy(state).float()
    action = torch.argmax(torch.matmul(state, weight))
    state, reward, is_done, _ = env.step(action.item())
    total_reward += reward
  return total_reward

n_episode = 1000
best_total_reward = 0
best_weight = None
total_rewards = []

"""##### run random search for find weight with max reward"""

for episode in range(n_episode):
  weight = torch.rand(n_state, n_action)
  total_reward = run_episode(env, weight)
  print('Episode {}: {}'.format(episode+1, total_reward))
  if total_reward > best_total_reward:
    best_weight = weight
    best_total_reward = total_reward
  total_rewards.append(total_reward)

print("average reward in random search", sum(total_rewards)/n_episode)

"""##### now, evalute best weight which obtained in random search."""

n_episode_eval = 100
total_rewards_eval = []
for episode in range(n_episode_eval):
  total_reward = run_episode(env, best_weight)
  print('Episode {}: {}'.format(episode+1, total_reward))
  total_rewards_eval.append(total_reward)

print('Average total reward over {} episode: {}'.format(n_episode_eval, sum(total_rewards_eval) / n_episode_eval))